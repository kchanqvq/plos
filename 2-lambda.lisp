(defpackage #:plos
  (:use #:cl)
  (:shadow #:eval #:apply))
(in-package #:plos)

(defun tagged-list? (obj tag)
  (and (consp obj) (eq (car obj) tag)))

(defun lookup (env symbol)
  (if (consp env)
      (let ((cell (assoc symbol (car env))))
        (if cell (cdr cell)
            (lookup (cdr env) symbol)))
      (error "Undefined variable ~S." symbol)))

(defun define (env symbol value)
  (if (consp env)
      (let ((cell (assoc symbol (car env))))
        (if cell (setf (cdr cell) value)
            (setf (car env)
                  (cons (cons symbol value)
                        (car env))))
        value)
      (error "Cannot define ~S in null environment." symbol)))

(defun eval (form env)
  (cond
    ((symbolp form) (lookup env form))
    ((tagged-list? form 'quote) (cadr form))
    ((tagged-list? form 'if)
     (if (eval (cadr form) env)
         (eval (caddr form) env)
         (eval (cadddr form) env)))
    ((tagged-list? form 'progn)
     (eval-multiple (cdr form) env))
    ((tagged-list? form 'lambda)
     (list* 'closure env (cadr form) (cddr form)))
    ((tagged-list? form 'define)
     (define env (cadr form) (eval (caddr form) env)))
    ((tagged-list? form 'load)
     (eval-multiple (uiop:read-file-forms (cadr form)) env cont))
    ((consp form)
     (let ((values (mapcar (lambda (arg) (eval arg env)) form)))
       (apply (car values) (cdr values))))
    (t form)))

(defun eval-multiple (forms env)
  "Evaluate FORMS one by one in ENV.
Return the value of the last form."
  (if (cdr forms)
      (progn
        (eval (car forms) env)
        (eval-multiple (cdr forms) env))
      (eval (car forms) env)))

(defun apply (op args)
  (cond
    ((functionp op) (cl:apply op args))
    ((tagged-list? op 'closure)
     (eval-multiple (cdddr op)
                    (cons (mapcar #'cons (caddr op) args)
                          (cadr op))))
    (t (error "~S is not applicable." op))))

(defun boot ()
  (let ((*print-circle* t)
        (env
          (list
           (list (cons nil nil)
                 (cons t t)
                 (cons 'cons? #'consp)
                 (cons 'cons #'cons)
                 (cons 'car #'car)
                 (cons 'cdr #'cdr)
                 (cons 'list #'list)
                 (cons 'list* #'list*)
                 (cons 'set-car! #'rplaca)
                 (cons 'set-cdr! #'rplacd)
                 (cons 'cadr #'cadr)
                 (cons 'cddr #'cddr)
                 (cons 'caddr #'caddr)
                 (cons 'cdddr #'cdddr)
                 (cons 'number? #'numberp)
                 (cons '+ #'+)
                 (cons '- #'-)
                 (cons '* #'*)
                 (cons '/ #'/)
                 (cons '< #'<)
                 (cons '> #'>)
                 (cons 'print (lambda (x) (prin1 x) (terpri)))
                 (cons 'error! #'error)))))
    (handler-case
        (loop
          (format t "~&PLOS-EVAL> ")
          (prin1 (eval (read) env)))
      (end-of-file () (format t "~%Moriturus te saluto.")))))
