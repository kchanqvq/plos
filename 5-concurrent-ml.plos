;; Loadable using 5-defunctionalize.lisp or later.

(load "5-process.plos")

(define make-channel
    (lambda () (list 'channel send-queue recv-queue)))

(define send
    (lambda (channel value)
      (if (empty? (caddr channel))
          (call/cc
           (lambda (process)
             (enqueue! (cadr channel) (cons value process))
             (dispatch!)))
          ((dequeue! (caddr channel)) value))))

(define recv
    (lambda (channel)
      (if (empty? (cadr channel))
          (call/cc
           (lambda (process)
             (enqueue! (caddr channel) process)
             (dispatch!)))
          (progn
            (define pair (dequeue! (cadr channel)))
            (enqueue! processes (cdr pair))
            (car pair)))))
