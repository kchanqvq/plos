;; Loadable using 7-interrupt.lisp or later.

(load "2-lambda.plos")

(define context-switch-ticks 1000)

(set-interrupt-handler!
 (lambda (interrupt)
   (if (eq? interrupt 'time)
       (progn
         (set-timer! context-switch-ticks)
         (yield))
       (error! "Unknown interrupt ~A." interrupt))))

;;; Process

(define processes (make-queue))

(define dispatch!
    (lambda ()
      (set-enable-interrupt-flag! nil)
      (define process (dequeue! processes))
      (set-enable-interrupt-flag! t)
      (process nil)))

(define yield
    (lambda ()
      (call/cc
       (lambda (caller)
         (set-enable-interrupt-flag! nil)
         (enqueue! processes caller)
         (dispatch!)))))

(define spawn
    (lambda (thunk)
      (call/cc
       (lambda (caller)
         (call/cc
          (lambda (process)
            (set-enable-interrupt-flag! nil)
            (enqueue! processes process)
            (set-enable-interrupt-flag! t)
            (caller process)))
         (thunk)
         (dispatch!)))))

(set-timer! context-switch-ticks)
(set-enable-interrupt-flag! t)

;;; For experiements

(define dead-loop! (lambda () (dead-loop!)))
