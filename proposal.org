* Course Overview
This course introduces students to the fundamental principles of operating systems from a programming language perspective. "Low-level" facilities traditionally provided by the operating system are explained and implemented using a high-level language (Common Lisp). Students start with the recursive definiton of a meta-circular interpreter for a simple Lisp dialect, then progressively lower the interpreter into a state machine and extend it with operating system functionalities. Topics will include CPS transformation, defunctionalization, multiprocessing, interrupt handling, automatic memory management, page swapping, persistent store and capability security model.

Prerequisites: CS242. This course uses a small subset of Common Lisp as implementation language. No prior experience with Lisp is required, but familarity with procedural programming (experience in one of OCaml, Haskell, JavaScript, Python or other high-level procedural languages) is strongly advised. A Common Lisp IDE (SLIME) integrated into Emacs will be used and familarity with Emacs is advised.

* Motivation
Most operating system courses today are centered around the particular design, implementation and application of Unix-like operating systems. This course instead takes a first-principle driven approach. A simple universal interpreter is taken as the starting point and progressively refined to satisfy practical application requirements. Programming-language theoretic foundations of many of these refinements will be discussed. For many design problems, multiple alternative implementation strategies are explored and the tradeoff is discussed. Students will learn not only how, but also why modern operating systems are designed and implemented in its current way, and will be able to apply techniques typically not found in Unix-like operating systems for suitable application domains. The choice to use a high-level language greatly reduces implementation effort and makes the code easier to explain and understand.

* Schedule
** Week 1
Tool of the trade: Basics of Lisp programming and Lisp environment.
Meta-circular evaluator.
** Week 2
CPS transformation. Defunctionalization.
** Week 3
Cooperative Threading. CSP-based concurrency.
** Week 4
Interrupt Handling. Preemptive Scheduling.
** Week 5
Symmetric Multi-processing.
** Week 6
Garbage Collection.
** Week 7
Page Swapping. Orthogonal persistence.
** Week 8
Orthogonal persistence 2. Object persistence.
** Week 9
Capability-based security.
** Week 10
